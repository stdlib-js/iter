
{{alias}}( iterator[, limit] )
    Returns an iterator which removes consecutive duplicated values.

    `NaN` values are considered distinct.

    Uniqueness is determined according to strict equality. Accordingly, objects
    are *not* checked for deep equality.

    If an environment supports Symbol.iterator and a provided iterator is
    iterable, the returned iterator is iterable.

    Parameters
    ----------
    iterator: Object
        Input iterator.

    limit: integer (optional)
        Number of allowed consecutive duplicates. Default: 1.

    Returns
    -------
    iterator: Object
        Iterator.

    iterator.next(): Function
        Returns an iterator protocol-compliant object containing the next
        iterated value (if one exists) and a boolean flag indicating whether the
        iterator is finished.

    iterator.return( [value] ): Function
        Finishes an iterator and returns a provided value.

    Examples
    --------
    > var arr = {{alias:@stdlib/array/to-iterator}}( [ 1, 1, 2, 3, 3 ] );
    > var it = {{alias}}( arr );
    > var v = it.next().value
    1
    > v = it.next().value
    2
    > v = it.next().value
    3

    See Also
    --------

